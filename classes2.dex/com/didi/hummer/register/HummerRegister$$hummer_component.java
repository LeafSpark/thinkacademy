package com.didi.hummer.register;

import com.didi.hummer.component.anchor.Anchor$$Invoker;
import com.didi.hummer.component.button.Button$$Invoker;
import com.didi.hummer.component.canvas.CanvasPath$$Invoker;
import com.didi.hummer.component.canvas.CanvasView$$Invoker;
import com.didi.hummer.component.dialog.Dialog$$Invoker;
import com.didi.hummer.component.imageview.Image$$Invoker;
import com.didi.hummer.component.input.Input$$Invoker;
import com.didi.hummer.component.input.TextArea$$Invoker;
import com.didi.hummer.component.list.List$$Invoker;
import com.didi.hummer.component.loading.Loading$$Invoker;
import com.didi.hummer.component.scroller.HorizontalScroller$$Invoker;
import com.didi.hummer.component.scroller.Scroller$$Invoker;
import com.didi.hummer.component.switchview.Switch$$Invoker;
import com.didi.hummer.component.text.Text$$Invoker;
import com.didi.hummer.component.toast.Toast$$Invoker;
import com.didi.hummer.component.view.View$$Invoker;
import com.didi.hummer.component.viewpager.ViewPager$$Invoker;
import com.didi.hummer.context.HummerContext;
import com.didi.hummer.meta.ComponentInvokerIndex;
import com.didi.hummer.meta.ComponentJsCodeInfo;
import java.util.HashSet;
import java.util.Set;

public class HummerRegister$$hummer_component implements ComponentInvokerIndex {
    public static final String JS_CODE = "var Image = class Image extends Base {\n    constructor(...args) {\n        super('Image', ...args);\n    }\n    set src(arg) {\n        this._src = arg;\n        arg = transSingleArg(arg);\n        invoke('Image', this.objID, 'setSrc', arg);\n    }\n    get src() {\n        return this._src;\n    }\n    set gifSrc(arg) {\n        this._gifSrc = arg;\n        arg = transSingleArg(arg);\n        invoke('Image', this.objID, 'setGifSrc', arg);\n    }\n    get gifSrc() {\n        return this._gifSrc;\n    }\n    set gifRepeatCount(arg) {\n        this._gifRepeatCount = arg;\n        arg = transSingleArg(arg);\n        invoke('Image', this.objID, 'setGifRepeatCount', arg);\n    }\n    get gifRepeatCount() {\n        return this._gifRepeatCount;\n    }\n    load(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('Image', this.objID, 'load', ...args);\n    }\n}\n__GLOBAL__.Image = Image;\nvar Loading = class Loading extends Base {\n    constructor(...args) {\n        super('Loading', ...args);\n    }\n}\n__GLOBAL__.Loading = Loading;\nvar TextArea = class TextArea extends Base {\n    constructor(...args) {\n        super('TextArea', ...args);\n    }\n    set text(arg) {\n        this._text = arg;\n        arg = transSingleArg(arg);\n        invoke('TextArea', this.objID, 'setText', arg);\n    }\n    get text() {\n        return invoke('TextArea', this.objID, 'getText');\n    }\n    set placeholder(arg) {\n        this._placeholder = arg;\n        arg = transSingleArg(arg);\n        invoke('TextArea', this.objID, 'setPlaceholder', arg);\n    }\n    get placeholder() {\n        return this._placeholder;\n    }\n    set focused(arg) {\n        this._focused = arg;\n        arg = transSingleArg(arg);\n        invoke('TextArea', this.objID, 'setFocused', arg);\n    }\n    get focused() {\n        return invoke('TextArea', this.objID, 'getFocused');\n    }\n}\n__GLOBAL__.TextArea = TextArea;\nvar Input = class Input extends Base {\n    constructor(...args) {\n        super('Input', ...args);\n    }\n    set text(arg) {\n        this._text = arg;\n        arg = transSingleArg(arg);\n        invoke('Input', this.objID, 'setText', arg);\n    }\n    get text() {\n        return invoke('Input', this.objID, 'getText');\n    }\n    set placeholder(arg) {\n        this._placeholder = arg;\n        arg = transSingleArg(arg);\n        invoke('Input', this.objID, 'setPlaceholder', arg);\n    }\n    get placeholder() {\n        return this._placeholder;\n    }\n    set focused(arg) {\n        this._focused = arg;\n        arg = transSingleArg(arg);\n        invoke('Input', this.objID, 'setFocused', arg);\n    }\n    get focused() {\n        return invoke('Input', this.objID, 'getFocused');\n    }\n}\n__GLOBAL__.Input = Input;\nvar Switch = class Switch extends Base {\n    constructor(...args) {\n        super('Switch', ...args);\n    }\n    set checked(arg) {\n        this._checked = arg;\n        arg = transSingleArg(arg);\n        invoke('Switch', this.objID, 'setChecked', arg);\n    }\n    get checked() {\n        return this._checked;\n    }\n}\n__GLOBAL__.Switch = Switch;\nvar ViewPager = class ViewPager extends Base {\n    constructor(...args) {\n        super('ViewPager', ...args);\n    }\n    set data(arg) {\n        this._data = arg;\n        arg = transSingleArg(arg);\n        invoke('ViewPager', this.objID, 'setData', arg);\n    }\n    get data() {\n        return this._data;\n    }\n    setCurrentItem(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('ViewPager', this.objID, 'setCurrentItem', ...args);\n    }\n    onPageChange(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('ViewPager', this.objID, 'onPageChange', ...args);\n    }\n    onPageScroll(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('ViewPager', this.objID, 'onPageScroll', ...args);\n    }\n    onPageScrollStateChange(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('ViewPager', this.objID, 'onPageScrollStateChange', ...args);\n    }\n    onItemClick(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('ViewPager', this.objID, 'onItemClick', ...args);\n    }\n    onItemView(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('ViewPager', this.objID, 'onItemView', ...args);\n    }\n    dbg_getDescription(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('ViewPager', this.objID, 'dbg_getDescription', ...args);\n    }\n}\n__GLOBAL__.ViewPager = ViewPager;\nvar Toast = class Toast extends Base {\n    constructor(...args) {\n        super('Toast', ...args);\n    }\n    static show(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('Toast', 0, 'show', ...args);\n    }\n    static custom(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('Toast', 0, 'custom', ...args);\n    }\n}\n__GLOBAL__.Toast = Toast;\nvar CanvasView = class CanvasView extends Base {\n    constructor(...args) {\n        super('CanvasView', ...args);\n    }\n    getCanvasContext(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        return invoke('CanvasView', this.objID, 'getCanvasContext', ...args);\n    }\n    drawImage(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('CanvasView', this.objID, 'drawImage', ...args);\n    }\n    fillRect(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('CanvasView', this.objID, 'fillRect', ...args);\n    }\n    strokeRect(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('CanvasView', this.objID, 'strokeRect', ...args);\n    }\n    fillCircle(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('CanvasView', this.objID, 'fillCircle', ...args);\n    }\n    strokeCircle(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('CanvasView', this.objID, 'strokeCircle', ...args);\n    }\n    fontSize(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('CanvasView', this.objID, 'fontSize', ...args);\n    }\n    fillText(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('CanvasView', this.objID, 'fillText', ...args);\n    }\n    arc(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('CanvasView', this.objID, 'arc', ...args);\n    }\n    drawLine(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('CanvasView', this.objID, 'drawLine', ...args);\n    }\n    drawLines(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('CanvasView', this.objID, 'drawLines', ...args);\n    }\n    strokeEllipse(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('CanvasView', this.objID, 'ellipse', ...args);\n    }\n    fillEllipse(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('CanvasView', this.objID, 'fillEllipse', ...args);\n    }\n    lineWidth(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('CanvasView', this.objID, 'lineWidth', ...args);\n    }\n    lineColor(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('CanvasView', this.objID, 'lineColor', ...args);\n    }\n    lineJoin(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('CanvasView', this.objID, 'lineJoin', ...args);\n    }\n    fillColor(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('CanvasView', this.objID, 'fillColor', ...args);\n    }\n    textColor(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('CanvasView', this.objID, 'textColor', ...args);\n    }\n    lineCap(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('CanvasView', this.objID, 'lineCap', ...args);\n    }\n}\n__GLOBAL__.CanvasView = CanvasView;\nvar CanvasPath = class CanvasPath extends Base {\n    constructor(...args) {\n        super('CanvasPath', ...args);\n    }\n    moveTo(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('CanvasPath', this.objID, 'moveTo', ...args);\n    }\n    lineTo(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('CanvasPath', this.objID, 'lineTo', ...args);\n    }\n    close(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('CanvasPath', this.objID, 'close', ...args);\n    }\n}\n__GLOBAL__.CanvasPath = CanvasPath;\nvar Dialog = class Dialog extends Base {\n    constructor(...args) {\n        super('Dialog', ...args);\n    }\n    set cancelable(arg) {\n        this._cancelable = arg;\n        arg = transSingleArg(arg);\n        invoke('Dialog', this.objID, 'setCancelable', arg);\n    }\n    get cancelable() {\n        return this._cancelable;\n    }\n    set lowLayer(arg) {\n        this._lowLayer = arg;\n        arg = transSingleArg(arg);\n        invoke('Dialog', this.objID, 'setLowLayer', arg);\n    }\n    get lowLayer() {\n        return this._lowLayer;\n    }\n    alert(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('Dialog', this.objID, 'alert', ...args);\n    }\n    confirm(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('Dialog', this.objID, 'confirm', ...args);\n    }\n    loading(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('Dialog', this.objID, 'loading', ...args);\n    }\n    custom(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('Dialog', this.objID, 'custom', ...args);\n    }\n    dismiss(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('Dialog', this.objID, 'dismiss', ...args);\n    }\n}\n__GLOBAL__.Dialog = Dialog;\nvar Button = class Button extends Base {\n    constructor(...args) {\n        super('Button', ...args);\n    }\n    set text(arg) {\n        this._text = arg;\n        arg = transSingleArg(arg);\n        invoke('Button', this.objID, 'setText', arg);\n    }\n    get text() {\n        return this._text;\n    }\n    set pressed(arg) {\n        this._pressed = arg;\n        arg = transSingleArg(arg);\n        invoke('Button', this.objID, 'setPressed', arg);\n    }\n    get pressed() {\n        return this._pressed;\n    }\n    set disabled(arg) {\n        this._disabled = arg;\n        arg = transSingleArg(arg);\n        invoke('Button', this.objID, 'setDisabled', arg);\n    }\n    get disabled() {\n        return this._disabled;\n    }\n}\n__GLOBAL__.Button = Button;\nvar List = class List extends Base {\n    constructor(...args) {\n        super('List', ...args);\n    }\n    set refreshView(arg) {\n        this._refreshView = arg;\n        arg = transSingleArg(arg);\n        invoke('List', this.objID, 'setRefreshView', arg);\n    }\n    get refreshView() {\n        return this._refreshView;\n    }\n    set loadMoreView(arg) {\n        this._loadMoreView = arg;\n        arg = transSingleArg(arg);\n        invoke('List', this.objID, 'setLoadMoreView', arg);\n    }\n    get loadMoreView() {\n        return this._loadMoreView;\n    }\n    set onRefresh(arg) {\n        this._onRefresh = arg;\n        arg = transSingleArg(arg);\n        invoke('List', this.objID, 'setOnRefresh', arg);\n    }\n    get onRefresh() {\n        return this._onRefresh;\n    }\n    set onLoadMore(arg) {\n        this._onLoadMore = arg;\n        arg = transSingleArg(arg);\n        invoke('List', this.objID, 'setOnLoadMore', arg);\n    }\n    get onLoadMore() {\n        return this._onLoadMore;\n    }\n    set onRegister(arg) {\n        this._onRegister = arg;\n        arg = transSingleArg(arg);\n        invoke('List', this.objID, 'setOnRegister', arg);\n    }\n    get onRegister() {\n        return this._onRegister;\n    }\n    set onCreate(arg) {\n        this._onCreate = arg;\n        arg = transSingleArg(arg);\n        invoke('List', this.objID, 'setOnCreate', arg);\n    }\n    get onCreate() {\n        return this._onCreate;\n    }\n    set onUpdate(arg) {\n        this._onUpdate = arg;\n        arg = transSingleArg(arg);\n        invoke('List', this.objID, 'setOnUpdate', arg);\n    }\n    get onUpdate() {\n        return this._onUpdate;\n    }\n    set showScrollBar(arg) {\n        this._showScrollBar = arg;\n        arg = transSingleArg(arg);\n        invoke('List', this.objID, 'setShowScrollBar', arg);\n    }\n    get showScrollBar() {\n        return this._showScrollBar;\n    }\n    set bounces(arg) {\n        this._bounces = arg;\n        arg = transSingleArg(arg);\n        invoke('List', this.objID, 'setBounces', arg);\n    }\n    get bounces() {\n        return this._bounces;\n    }\n    refresh(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('List', this.objID, 'refresh', ...args);\n    }\n    stopPullRefresh(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('List', this.objID, 'stopPullRefresh', ...args);\n    }\n    stopLoadMore(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('List', this.objID, 'stopLoadMore', ...args);\n    }\n    scrollTo(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('List', this.objID, 'scrollTo', ...args);\n    }\n    scrollBy(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('List', this.objID, 'scrollBy', ...args);\n    }\n    scrollToPosition(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('List', this.objID, 'scrollToPosition', ...args);\n    }\n    dbg_getDescription(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('List', this.objID, 'dbg_getDescription', ...args);\n    }\n}\n__GLOBAL__.List = List;\nvar View = class View extends Base {\n    constructor(...args) {\n        super('View', ...args);\n    }\n    appendChild(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('View', this.objID, 'appendChild', ...args);\n    }\n    removeChild(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('View', this.objID, 'removeChild', ...args);\n    }\n    removeAll(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('View', this.objID, 'removeAll', ...args);\n    }\n    insertBefore(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('View', this.objID, 'insertBefore', ...args);\n    }\n    replaceChild(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('View', this.objID, 'replaceChild', ...args);\n    }\n    getElementById(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        return invoke('View', this.objID, 'getElementById', ...args);\n    }\n    layout(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('View', this.objID, 'layout', ...args);\n    }\n    empty(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('View', this.objID, 'empty', ...args);\n    }\n}\n__GLOBAL__.View = View;\nvar Anchor = class Anchor extends Base {\n    constructor(...args) {\n        super('Anchor', ...args);\n    }\n    appendChild(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('Anchor', this.objID, 'appendChild', ...args);\n    }\n    removeChild(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('Anchor', this.objID, 'removeChild', ...args);\n    }\n    removeAll(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('Anchor', this.objID, 'removeAll', ...args);\n    }\n    insertBefore(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('Anchor', this.objID, 'insertBefore', ...args);\n    }\n    replaceChild(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('Anchor', this.objID, 'replaceChild', ...args);\n    }\n    getElementById(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        return invoke('Anchor', this.objID, 'getElementById', ...args);\n    }\n    layout(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('Anchor', this.objID, 'layout', ...args);\n    }\n    empty(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('Anchor', this.objID, 'empty', ...args);\n    }\n}\n__GLOBAL__.Anchor = Anchor;\nvar Text = class Text extends Base {\n    constructor(...args) {\n        super('Text', ...args);\n    }\n    set text(arg) {\n        this._text = arg;\n        arg = transSingleArg(arg);\n        invoke('Text', this.objID, 'setText', arg);\n    }\n    get text() {\n        return this._text;\n    }\n    set richText(arg) {\n        this._richText = arg;\n        arg = transSingleArg(arg);\n        invoke('Text', this.objID, 'setRichText', arg);\n    }\n    get richText() {\n        return this._richText;\n    }\n    set formattedText(arg) {\n        this._formattedText = arg;\n        arg = transSingleArg(arg);\n        invoke('Text', this.objID, 'setFormattedText', arg);\n    }\n    get formattedText() {\n        return this._formattedText;\n    }\n    set textCopyEnable(arg) {\n        this._textCopyEnable = arg;\n        arg = transSingleArg(arg);\n        invoke('Text', this.objID, 'setTextCopyEnable', arg);\n    }\n    get textCopyEnable() {\n        return this._textCopyEnable;\n    }\n}\n__GLOBAL__.Text = Text;\nvar Scroller = class Scroller extends Base {\n    constructor(...args) {\n        super('Scroller', ...args);\n    }\n    appendChild(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('Scroller', this.objID, 'appendChild', ...args);\n    }\n    removeChild(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('Scroller', this.objID, 'removeChild', ...args);\n    }\n    removeAll(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('Scroller', this.objID, 'removeAll', ...args);\n    }\n    insertBefore(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('Scroller', this.objID, 'insertBefore', ...args);\n    }\n    replaceChild(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('Scroller', this.objID, 'replaceChild', ...args);\n    }\n    getElementById(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        return invoke('Scroller', this.objID, 'getSubview', ...args);\n    }\n    layout(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('Scroller', this.objID, 'layout', ...args);\n    }\n    set showScrollBar(arg) {\n        this._showScrollBar = arg;\n        arg = transSingleArg(arg);\n        invoke('Scroller', this.objID, 'setShowScrollBar', arg);\n    }\n    get showScrollBar() {\n        return this._showScrollBar;\n    }\n    set refreshView(arg) {\n        this._refreshView = arg;\n        arg = transSingleArg(arg);\n        invoke('Scroller', this.objID, 'setRefreshView', arg);\n    }\n    get refreshView() {\n        return this._refreshView;\n    }\n    set loadMoreView(arg) {\n        this._loadMoreView = arg;\n        arg = transSingleArg(arg);\n        invoke('Scroller', this.objID, 'setLoadMoreView', arg);\n    }\n    get loadMoreView() {\n        return this._loadMoreView;\n    }\n    set onRefresh(arg) {\n        this._onRefresh = arg;\n        arg = transSingleArg(arg);\n        invoke('Scroller', this.objID, 'setOnRefresh', arg);\n    }\n    get onRefresh() {\n        return this._onRefresh;\n    }\n    set onLoadMore(arg) {\n        this._onLoadMore = arg;\n        arg = transSingleArg(arg);\n        invoke('Scroller', this.objID, 'setOnLoadMore', arg);\n    }\n    get onLoadMore() {\n        return this._onLoadMore;\n    }\n    stopPullRefresh(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('Scroller', this.objID, 'stopPullRefresh', ...args);\n    }\n    stopLoadMore(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('Scroller', this.objID, 'stopLoadMore', ...args);\n    }\n    set bounces(arg) {\n        this._bounces = arg;\n        arg = transSingleArg(arg);\n        invoke('Scroller', this.objID, 'setBounces', arg);\n    }\n    get bounces() {\n        return this._bounces;\n    }\n    scrollTo(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('Scroller', this.objID, 'scrollTo', ...args);\n    }\n    scrollBy(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('Scroller', this.objID, 'scrollBy', ...args);\n    }\n    scrollToTop(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('Scroller', this.objID, 'scrollToTop', ...args);\n    }\n    scrollToBottom(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('Scroller', this.objID, 'scrollToBottom', ...args);\n    }\n    setOnScrollToTopListener(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('Scroller', this.objID, 'setOnScrollToTopListener', ...args);\n    }\n    setOnScrollToBottomListener(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('Scroller', this.objID, 'setOnScrollToBottomListener', ...args);\n    }\n    updateContentSize(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('Scroller', this.objID, 'updateContentSize', ...args);\n    }\n}\n__GLOBAL__.Scroller = Scroller;\nvar HorizontalScroller = class HorizontalScroller extends Base {\n    constructor(...args) {\n        super('HorizontalScroller', ...args);\n    }\n    appendChild(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('HorizontalScroller', this.objID, 'appendChild', ...args);\n    }\n    removeChild(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('HorizontalScroller', this.objID, 'removeChild', ...args);\n    }\n    removeAll(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('HorizontalScroller', this.objID, 'removeAll', ...args);\n    }\n    insertBefore(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('HorizontalScroller', this.objID, 'insertBefore', ...args);\n    }\n    replaceChild(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('HorizontalScroller', this.objID, 'replaceChild', ...args);\n    }\n    getElementById(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        return invoke('HorizontalScroller', this.objID, 'getSubview', ...args);\n    }\n    layout(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('HorizontalScroller', this.objID, 'layout', ...args);\n    }\n    set showScrollBar(arg) {\n        this._showScrollBar = arg;\n        arg = transSingleArg(arg);\n        invoke('HorizontalScroller', this.objID, 'setShowScrollBar', arg);\n    }\n    get showScrollBar() {\n        return this._showScrollBar;\n    }\n    set bounces(arg) {\n        this._bounces = arg;\n        arg = transSingleArg(arg);\n        invoke('HorizontalScroller', this.objID, 'setBounces', arg);\n    }\n    get bounces() {\n        return this._bounces;\n    }\n    scrollTo(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('HorizontalScroller', this.objID, 'scrollTo', ...args);\n    }\n    scrollBy(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('HorizontalScroller', this.objID, 'scrollBy', ...args);\n    }\n    scrollToTop(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('HorizontalScroller', this.objID, 'scrollToTop', ...args);\n    }\n    scrollToBottom(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('HorizontalScroller', this.objID, 'scrollToBottom', ...args);\n    }\n    setOnScrollToTopListener(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('HorizontalScroller', this.objID, 'setOnScrollToTopListener', ...args);\n    }\n    setOnScrollToBottomListener(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('HorizontalScroller', this.objID, 'setOnScrollToBottomListener', ...args);\n    }\n    updateContentSize(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('HorizontalScroller', this.objID, 'updateContentSize', ...args);\n    }\n}\n__GLOBAL__.HorizontalScroller = HorizontalScroller;\n";
    private ComponentJsCodeInfo CODE_INDEX = new ComponentJsCodeInfo();
    private Set INVOKER_INDEX = new HashSet();

    public HummerRegister$$hummer_component() {
        setInvokers();
        setCodes();
    }

    public static void init(HummerContext hummerContext) {
        hummerContext.registerInvoker(new Image$$Invoker());
        hummerContext.registerInvoker(new Loading$$Invoker());
        hummerContext.registerInvoker(new TextArea$$Invoker());
        hummerContext.registerInvoker(new Input$$Invoker());
        hummerContext.registerInvoker(new Switch$$Invoker());
        hummerContext.registerInvoker(new ViewPager$$Invoker());
        hummerContext.registerInvoker(new Toast$$Invoker());
        hummerContext.registerInvoker(new CanvasView$$Invoker());
        hummerContext.registerInvoker(new CanvasPath$$Invoker());
        hummerContext.registerInvoker(new Dialog$$Invoker());
        hummerContext.registerInvoker(new Button$$Invoker());
        hummerContext.registerInvoker(new List$$Invoker());
        hummerContext.registerInvoker(new View$$Invoker());
        hummerContext.registerInvoker(new Anchor$$Invoker());
        hummerContext.registerInvoker(new Text$$Invoker());
        hummerContext.registerInvoker(new Scroller$$Invoker());
        hummerContext.registerInvoker(new HorizontalScroller$$Invoker());
        hummerContext.evaluateJavaScript(JS_CODE, "hummer_component.js");
    }

    private void setInvokers() {
        this.INVOKER_INDEX.add(new Image$$Invoker());
        this.INVOKER_INDEX.add(new Loading$$Invoker());
        this.INVOKER_INDEX.add(new TextArea$$Invoker());
        this.INVOKER_INDEX.add(new Input$$Invoker());
        this.INVOKER_INDEX.add(new Switch$$Invoker());
        this.INVOKER_INDEX.add(new ViewPager$$Invoker());
        this.INVOKER_INDEX.add(new Toast$$Invoker());
        this.INVOKER_INDEX.add(new CanvasView$$Invoker());
        this.INVOKER_INDEX.add(new CanvasPath$$Invoker());
        this.INVOKER_INDEX.add(new Dialog$$Invoker());
        this.INVOKER_INDEX.add(new Button$$Invoker());
        this.INVOKER_INDEX.add(new List$$Invoker());
        this.INVOKER_INDEX.add(new View$$Invoker());
        this.INVOKER_INDEX.add(new Anchor$$Invoker());
        this.INVOKER_INDEX.add(new Text$$Invoker());
        this.INVOKER_INDEX.add(new Scroller$$Invoker());
        this.INVOKER_INDEX.add(new HorizontalScroller$$Invoker());
    }

    private void setCodes() {
        this.CODE_INDEX.set(JS_CODE, "hummer_component.js");
    }

    public Set getInvokerSet() {
        return this.INVOKER_INDEX;
    }

    public ComponentJsCodeInfo getJsCodeInfo() {
        return this.CODE_INDEX;
    }
}
